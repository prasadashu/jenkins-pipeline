pipeline {
    // Configure global agent
    agent {
        docker {
            image 'ashuprasaddocker/cicddevops:jenkins-agent'
            args '--user root \
                  -v /var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonar-scanner:/opt/sonar-scanner \
                  -v /opt/trivy-results:/opt/trivy-results \
                  -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    // Define Build Stages
    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git',
                    branch: 'main'
            }
        }
        stage('Build Artifacts') {
            steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app \
                    && mvn clean package'
            }
        }
        stage('Code Quality Check') {
            environment {
                SONAR_URL = 'http://159.89.239.109:9000'
                SONAR_HOME = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('sonar-scanner') {
                    withCredentials([string(credentialsId: 'sonar-scanner', variable: 'SONAR_AUTH_TOKEN')]) {
                        script {
                            sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app \
                            && $SONAR_HOME/bin/sonar-scanner -Dsonar.login=$SONAR_AUTH_TOKEN \
                                -Dsonar.host.url=${SONAR_URL} \
                                -Dsonar.projectKey=DevOps-CICD"
                        }
                    }
                }
            }
        }
        stage('Build Docker Image') {
            environment {
                DOCKER_IMAGE = "ashuprasaddocker/cicddevops:v${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-registry')
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }
        stage('Scan Docker Image') {
            environment {
                DOCKER_IMAGE = "ashuprasaddocker/cicddevops:v${BUILD_NUMBER}"
                TRIVY_IMAGE = "aquasec/trivy:latest"
            }
            steps {
                script {
                    // Run Trivy scan and save the output to a JSON file
                    sh """
                    docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v /mnt/volume_nyc1_04/trivy-db:/root/.cache/trivy \
                        ${TRIVY_IMAGE} image \
                        --exit-code 1 \
                        --severity HIGH,CRITICAL \
                        --ignore-unfixed \
                        --format json -o /root/.cache/trivy/results.json \
                        ${DOCKER_IMAGE}
                    """
                }
            }
        }
    }
}